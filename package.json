{
  "private": true,
  "name": "j1-theme",
  "version": "2024.3.0",
  "description": "Gem-based Template for Jekyll",
  "homepage": "https://jekyll.one",
  "author": {
    "name": "Juergen Adams",
    "email": "jadams@jekyll-one.com",
    "url": "https://jekyll.one"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jekyll-one/j1_template/issues"
  },
  "config": {
    "jekyll_app_interface": "0.0.0.0",
    "jekyll_app_port": "30010",
    "jekyll_app_url": "http://localhost:30010/",
    "jekyll_config_file": "_config.yml",
    "jekyll_port": "30000",
    "jekyll_livereload_port": "30001",
    "jekyll_option_livereload": "--livereload",
    "jekyll_option_watch": "--watch",
    "jekyll_option_initial_build": "--skip-initial-build",
    "jekyll_option_incremental": "--incremental",
    "ruby_gemfile": "Gemfile",
    "ruby_userize": "true",
    "ruby_vendorize": "true",
    "mode": "development",
    "loglevel": "silent"
  },
  "engines": {
    "node": ">=16.0",
    "npm": ">=8.0",
    "yarn": ">=1.22"
  },
  "npm": {
    "loglevel": "silent",
    "prepend_nodepath": "true"
  },
  "keywords": [
    "J1",
    "Template",
    "Static",
    "Web",
    "Generator",
    "Clear",
    "Responsive",
    "Featured",
    "Gem-based"
  ],
  "scripts": {
    "app": "lerna run --parallel app",
    "algolia": "lerna --parallel --scope site run algolia",
    "algolia-check": "lerna --parallel --scope site run algolia-check",
    "audit": "npm audit",
    "build": "lerna run build --parallel",
    "bump": "cross-var cross-env if-env J1DOCKER=true && run-s -s bump-docker || run-s -s bump-local",
    "clean": "run-p -s clean:*",
    "cy": "npm run --silent cypress:open",
    "j1": "node _support/js/info.js",
    "rebuild": "lerna run rebuild --parallel --scope",
    "bundle": "lerna run bundle --parallel --scope site",
    "deploy": "lerna run deploy",
    "lint": "lerna run lint --parallel --scope",
    "gem": "lerna run --parallel --scope gem",
    "publish": "npm --silent run publish:*",
    "setup": "npm --silent run setup-start && npm --silent run setup-base && run-s -s setup-create-log-folders && run-s -s setup:*",
    "site": "lerna run --parallel develop",
    "run": "lerna run --parallel",
    "reset": "run-s -s reset:*",
    "ver": "cross-var echo \"Project version: $npm_package_version\" && echo Package versions: && lerna ls && cd ./packages/500_theme_gem && bump current | shx sed \"s/Current version:/Gem version:    /\"",
    "bump-local": "run-s -s ver && run-s -s bump-version:* && run-s -s ver",
    "bump-docker": "shx mv package-lock.json .package-lock.json && run-s -s ver && run-s -s bump-version:* && run-s -s ver && shx mv .package-lock.json package-lock.json",
    "bump-version:project": "cross-var npm version $npm_package_config_bumplevel",
    "bump-version:packages": "cross-var lerna publish --repo-version $npm_package_version --skip-npm --skip-git --force-publish --yes",
    "bump-version:ruby-gem": "cd packages/500_theme_gem && cross-var bump $npm_package_config_bumplevel",
    "bump-version-no-git": "cross-var npm --no-git-tag-version version $npm_package_config_bumplevel",
    "clean:start": "echo Clean up project root files ..",
    "clean:bundle-folder": "echo Remove bundle folder .. && shx rm -rf .bundle",
    "clean:log-folder": "echo Remove log folder .. && shx rm -rf log",
    "clean:log-files": "echo Remove log files .. && shx rm -f *.log",
    "clean:gemfile": "shx rm -rf ./Gemfile",
    "clean:locks": "shx rm -rf *.lock && shx rm -rf package-lock.json",
    "clean:packages": "echo Clean up project packages .. && lerna run --parallel clean",
    "credentials": "run-s -s credential:*",
    "credential:echo": "echo Store username and password ..",
    "credential:set": "git config credential.helper store && echo done.",
    "cypress:open": "cross-var cross-env $CYPRESS_INSTALL_BINARY=0 ./node_modules/.bin/cypress open",
    "publish:print-current-versions": "npm run version:current",
    "publish:publish-no-npm": "lerna publish --skip-npm",
    "reset:start": "echo Reset development system to factory state ..",
    "reset:clean-files": "npm --silent run clean",
    "reset:clean": "echo Remove js modules from all packages .. && lerna clean --yes",
    "reset:done": "echo done.",
    "setup:files": "echo Create starter config files .. && lerna run --parallel jekyll_files",
    "setup:node-modules": "echo Bootstrap project modules .. && echo J1 Project modules: >> install.log && npm install --silent >> install.log && echo done.",
    "setup:lerna": "echo Initialize development packages .. && lerna init && lerna bootstrap && echo done.",
    "setup:detect-os": "echo Detect operating system .. && cross-var cross-env if-env OS=Windows_NT && cross-var echo \"OS detected as: $OS\" || OS=$(echo $(getos)) && echo \"OS detected as: $OS\"",
    "setup:links": "echo Create links for shared resources .. && lerna run --parallel setup-links",
    "setup:build": "lerna run --parallel build",
    "setup-start": "echo Set up development system for first use ..",
    "setup-create-log-folders": "echo Create project folders .. && run-s -s -s setup-create-folders:*",
    "setup-create-folders:log-folder": "shx mkdir packages/400_theme_site/log",
    "setup-create-folders:archived-folder": "shx mkdir packages/400_theme_site/log/archived",
    "setup-create-folders:link-log-folder": "shx ln -s packages/400_theme_site/log ./log && echo done.",
    "setup-base": "echo Bootstrap base modules .. && echo J1 Project Base modules: > install.log && npm install --silent shx npm-run-all cross-var cross-env >> install.log && echo done.",
    "setup:env": "cross-var echo \"Configure environment ..\" && run-s -s set-env:*",
    "setup:tip": "echo Run \"yarn site\" to open the web.",
    "set-env:npm-loglevel": "cross-var cross-env npm_config_loglevel=$npm_package_npm_loglevel",
    "set-env:npm-node-path": "cross-var cross-env  npm config set scripts-prepend-node-path=$npm_package_npm_prepend_nodepath",
    "set-env:mode": "cross-var cross-env npm_config_mode=$npm_package_config_mode && echo done.",
    "parent-script": "cross-env BUNDLE_VENDORIZE=$npm_package_jekyll_vendorize run-s -s child-script",
    "child-script": "cross-env if-env BUNDLE_VENDORIZE=true && echo bundle vendorized || echo bundle global"
  },
  "dependencies": {
    "cross-env": "^7.0.3",
    "cross-var": "^1.1.0",
    "getos": "^3.1",
    "getos-cli": "^1.0",
    "if-env": "^1.0",
    "lerna": "^6.6.2",
    "npm-delay": "^1.0",
    "npm-run-all": "^4.1.5",
    "shx": "^0.3.4",
    "tocbot": "^4.25.0",
    "yarn": "^1.22"
  },
  "optionalDependencies": {
    "fsevents": "^1.2.7"
  },
  "devDependencies": {
    "@babel/core": "^7",
    "@babel/preset-env": "^7",
    "@popperjs/core": "^2.10",
    "@webpack-cli/serve": "^1.6",
    "babel-loader": "^8.0",
    "webpack": "^5.62",
    "webpack-cli": "^4.9",
    "webpack-dev-server": "^4.4",
    "webpack-merge": "^5.8"
  }
}
