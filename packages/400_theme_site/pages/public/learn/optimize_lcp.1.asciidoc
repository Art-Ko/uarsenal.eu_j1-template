---
title:                                  Optimize LCP
tagline:                                Fasten Your Way
date:                                   2022-11-03 00:00:00 +100
description: >
                                        Optimizing the user experience you offer on your website is essential
                                        for the success of any online business. Google does use different user
                                        experience-related metrics to rank web pages for SEO and has continued
                                        to provide multiple tools to measure and improve web performance.

keywords:                               Jekyll, Theme, JekyllOne, Turorial, SEO, Oprimize, LCP

categories:                             [ Tutorial ]
tags:                                   [ SEO, LCP ]

image:
  path:                                 /assets/images/modules/attics/1920x1280/alexander-redl.jpg
  width:                                1920
  height:                               1280
  alt:                                  Photo by Alexander Redl on Unsplash

fab_menu_id:                            default
regenerate:                             false
permalink:                              /pages/public/learn/optimize_lcp/

resources:                              [ animate]
resource_options:
  - attic:
      slides:
        - url:                          /assets/images/modules/attics/1920x1280/alexander-redl.jpg
          alt:                          Photo by Alexander Redl on Unsplash
          badge:
            type:                       unsplash
            author:                     Alexander Redl
            href:                       https://unsplash.com/@alexanderredl
---

// Page Initializer
// =============================================================================
// Enable the Liquid Preprocessor
:page-liquid:

// Set (local) page attributes here
// -----------------------------------------------------------------------------
// :page--attr:                         <attr-value>


//  Load Liquid procedures
// -----------------------------------------------------------------------------
{% capture load_attributes %}themes/{{site.template.name}}/procedures/global/attributes_loader.proc{%endcapture%}

// Load page attributes
// -----------------------------------------------------------------------------
{% include {{load_attributes}} scope="global" %}


// Page content
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[role="dropcap"]
Optimizing the user experience you offer on your website is essential
for the success of any online business. Google does use different user
experience-related metrics to rank web pages for SEO and has continued
to provide multiple tools to measure and improve web performance.

In its recent attempt to simplify the measurement and understanding of
what qualifies as a good user experience, Google standardized the page’s
user experience metrics. These standardized metrics are called Core Web Vitals
and help evaluate the real-world user experience on your web page.

// Include sub-documents (if any)
// -----------------------------------------------------------------------------
== What is the LCP metric

Largest Contentful Paint or LCP is one of the Core Web Vitals metrics,
which measures when the largest content element in the viewport becomes
visible. While other metrics like TTFB and First Contentful Paint also
help measure the page experience, they do not represent when the page
has become “meaningful” for the user.

Usually, unless the largest element on the page becomes completely
visible, the page may not provide much context for the user. LCP is,
therefore, more representative of the user’s expectations.As a Core Web
Vital metric, *LCP accounts for 25% of the Performance Score*, making it
one of the most important metrics to optimize.

== Checking Your LCP time

As per Google, the types of elements considered for Largest Contentful
Paint are:

* `<img>` elements
* `<image>` elements inside an `<svg>` element
* `<video>` elements (the poster image is used)
* An element with a background image loaded via the https://developer.mozilla.org/en-US/docs/Web/CSS/url[url()]
  function (as opposed to a
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients[CSS])
  gradient
* https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements[Block-level]
  elements containing text nodes or other inline-level text elements
  children.

Now, there are multiple ways to measure the LCP of your page. The easiest
ways to measure it are
https://imagekit.io/blog/improve-google-pagespeed-insights-score-for-images/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[PageSpeed Insights],
Lighthouse, Search Console (Core Web Vitals Report), and the
Chrome User Experience Report.

For example, Google PageSpeed Insights in its report indicates the
element considered for calculating the LCP.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/LCP_Image.jpg?resize=1601%2C1201&ssl=1[image,width=558,height=419]

=== What is a good LCP

To provide a good user experience, you should strive to have a Largest
Contentful Paint of *2.5 seconds* or less on your website. A majority of
your page loads should be happening under this threshold.

Now that we know what is LCP and what our target should be let’s look at
ways to improve LCP on our website.

== How to optimize LCP

The underlying principle of reducing LCP in all of the techniques
mentioned below is to reduce the data downloaded on the user’s device
and reduce the time it takes to send and execute that content.

=== Optimize your images

On most websites, the above-the-fold content usually contains a large
image which gets considered for LCP. It could either be a hero image, a
banner, or a carousel. It is, therefore, crucial that you optimize these
images for a better LCP.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/optimised-vs-unoptimised.jpeg?resize=1600%2C681&ssl=1[image,width=1600,height=681]

To optimize your images, you should use a third-party image CDN like
ImageKit.io. The advantage of using a third-party
https://imagekit.io/blog/what-is-image-cdn-guide/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[image CDN]
is that you can focus on your actual business and leave image
optimization to the image CDN.

The image CDN would stay at the edge of technology evolution, and you
always get the best possible features with minimum ongoing investment.

ImageKit is a complete real-time image CDN that integrates with any
existing cloud storage like AWS S3, Azure, Google Cloud Storage, etc. It
even comes with its integrated image storage and manager called the
Media Library.

Here is how ImageKit can help you improve your LCP score.

=== Deliver your images in lighter formats

ImageKit detects if the user’s browser supports modern lighter formats
like WebP or AVIF and automatically delivers the image in the lightest
possible format in real-time. Formats like WebP are over 30% lighter
compared to their JPEG equivalents.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/webp_jpg_image_size_comparison.jpeg?resize=1200%2C691&ssl=1[image,width=1200,height=691]

=== Automatically compress your images

Not just converting the image to the correct format, ImageKit also
compresses your image to a smaller size. In doing so, it balances the
image’s visual quality and the output size.

You get the option to alter the compression level (or quality) in
real-time by just changing a URL parameter, thereby balancing your
business requirements of visual quality and load time.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/image-compression-comparison_quality.jpeg?resize=1750%2C860&ssl=1[image,width=1750,height=860]

=== Provide real-time transformations for responsive images

Google uses mobile-first indexing for almost all websites. It is
therefore essential to optimize LCP for mobile more than that for
desktop. Every image needs to be scaled down to as per the layout’s
requirement.

For example, you would need the image in a smaller size on the product
listing page and a larger size on the product detail page. This resizing
ensures that you are not sending any additional bytes than what is
required for that particular page.

ImageKit allows you to transform
https://imagekit.io/responsive-images/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[responsive images]
in real-time just by adding the corresponding transformation in
the image URL. For example, the following image is resized to width
200px and height 300px by adding the height and width transformation
parameters in its URL.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/eiffel-tower-example_200400.jpg?resize=200%2C400&ssl=1[image,width=200,height=400]

=== Cache images and improve delivery time

Image CDNs use a global
https://imagekit.io/blog/what-is-content-delivery-network-cdn-guide/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[Content
Delivery Network] (CDN) to deliver the images. Using a CDN ensures that
images load from a location closer to the user instead of your server,
which could be halfway across the globe.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/CDN_server_user.jpg?resize=702%2C250&ssl=1[image,width=702,height=250]

ImageKit, for example, uses AWS Cloudfront as its CDN, which has over
220 deliver nodes globally. A vast majority of the images get loaded in
less than 50ms. Additionally, it uses the proper caching directives to
cache the images on the user’s device, CDN nodes, and even its
processing network for a faster load time.

This helps to improve LCP on your website.

=== Preload critical resources

There are certain cases where the browser may not prioritize loading a
visually important resource that impacts LCP. For example, a banner
image above the fold could be specified as a background image inside a
CSS file. Since the browser would never know about this image until the
CSS file is downloaded and parsed along with the DOM tree, it will not
prioritize loading it.

For such resources, you can preload them by adding a `<link>` tag with a
`rel= "preload"` attribute to the head section of your HTML document.

[source,wp-block-csstricks-code-block,language-html]
----
<!-- Example of preloading -->
<link rel="preload" src="banner_image.jpg" />
----

While you can preload multiple resources in a document, you should
always restrict it to above-the-fold images or videos, page-wide font
files, or critical CSS and JS files.


=== Reduce server response times

If your server takes long to respond to a request, then the time it
takes to render the page on the screen also goes up. It, therefore,
negatively affects every page speed metric, including LCP. To improve
your server response times, here is what you should do.

=== Analyze and optimize your servers

A lot of computation, DB queries, and page construction happens on the
server. You should analyze the requests going to your servers and
identify the possible bottlenecks for responding to the requests. It
could be a DB query slowing things down or the building of the page on
your server.

You can apply best practices like caching of DB responses, pre-rendering
of pages, amongst others, to reduce the time it takes for your server to
respond to requests.

Of course, if the above does not improve the response time, you might
need to increase your server capacity to handle the number of requests
coming in.

=== Use a Content Delivery Network

We have already seen above that using an image CDN like ImageKit
improves the loading time for your images. Your users get the content
delivered from a CDN node close to their location in milliseconds.

image::https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/with-cdn.jpg?resize=452%2C250&ssl=1[image,width=452,height=250]

You should extend the same to other content on your website. Using a CDN
for your static content like JS, CSS, and font files will significantly
speed up their load time. ImageKit does support the delivery of static
content through its systems.

You can also try to use a CDN for your HTML and APIs to cache those
responses on the CDN nodes. Given the dynamic nature of such content,
using a CDN for HTML or APIs can be a lot more complex than using a CDN
for static content.

=== Preconnect to third-party origins

If you use third-party domains to deliver critical above-the-fold
content like JS, CSS, or images, then you would benefit by indicating to
the browser that a connection to that third-party domain needs to be
made as soon as possible. This is done using the `rel="preconnect"`
attribute of the `<link>` tag.

[source,wp-block-csstricks-code-block,language-html]
----
<link rel="preconnect" href="https://static.example.com" />
----

With `preconnect` in place, the browser can save the domain connection
time when it downloads the actual resource later.

Subdomains like static.example.com, of your main website domain
example.com are also third-party domains in this context.

You can also use the _dns-prefetch_ as a fallback in browsers that don’t
support preconnect. This directive instructs the browser to complete the
DNS resolution to the third-party domain even if it cannot establish a
proper connection.


=== Serve content cache-first using a Service Worker

Service workers can intercept requests originating from the user’s
browser and serve cached responses for the same. This allows us to cache
static assets and HTML responses on the user’s device and serve them
without going to the network.

While the service worker cache serves the same purpose as the HTTP or
browser cache, it offers fine-grained control and can work even if the
user is offline. You can also use service workers to serve precached
content from the cache to users on slow network speeds, thereby bringing
down LCP time.

=== Compress text files

Any text-based data you load on your webpage should be compressed when
transferred over the network using a compression algorithm like gzip or
Brotli. SVGs, JSONs, API responses, JS and CSS files, and your main
page’s HTML are good candidates for compression using these algorithms.
This compression significantly reduces the amount of data that will get
downloaded on page load, therefore bringing down the LCP.

=== Remove render-blocking resources

When the browser receives the HTML page from your server, it parses the
DOM tree. If there is any external stylesheet or JS file in the DOM, the
browser has to pause for them before moving ahead with the parsing of
the remaining DOM tree.

These JS and CSS files are called render-blocking resources and delay
the LCP time. Here are some ways to reduce the blocking time for JS and
CSS files:

=== Do not load unnecessary bundles

Avoid shipping huge bundles of JS and CSS files to the browser if they
are not needed. If the CSS can be downloaded a lot later, or a JS
functionality is not needed on a particular page, there is no reason to
load it up front and block the render in the browser.

Suppose you cannot split a particular file into smaller bundles, but it
is not critical to the functioning of the page either. In that case, you
can use the defer attribute of the script tag to indicate to the browser
that it can go ahead with the DOM parsing and continue to execute the JS
file at a later stage. Adding the defer attribute removes any blocker
for DOM parsing. The LCP, therefore, goes down.


=== Inline critical CSS

Critical CSS comprises the style definitions needed for the DOM that
appears in the first fold of your page. If the style definitions for
this part of the page are inline, i.e., in each element’s `style`
attribute, the browser has no dependency on the external CSS to style
these elements. Therefore, it can render the page quickly, and the LCP
goes down.


=== Minify and compress the content

You should always minify the CSS and JS files before loading them in the
browser. CSS and JS files contain whitespace to make them legible, but
they are unnecessary for code execution. So, you can remove them, which
reduces the file size on production. Smaller file size means that the
files can load quickly, thereby reducing your LCP time.

Compression techniques, as discussed earlier, use data compression
algorithms to bring down the file size delivered over the network. Gzip
and Brotli are two compression algorithms.
https://imagekit.io/blog/what-and-why-brotli-compression/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[Brotli compression]
offers a superior compression ratio compared to Gzip and is
now supported on all major browsers, servers, and CDNs.


== Optimize LCP for client-side rendering

Any client-side rendered website requires a considerable amount of
Javascript to load in the browser. If you do not optimize the Javascript
sent to the browser, then the user may not see or be able to interact
with any content on the page until the Javascript has been downloaded
and executed.

We discussed a few JS-related optimizations above, like optimizing the
bundles sent to the browser and compressing the content. There are a
couple of more things you can do to optimize the rendering on client
devices.


=== Using server-side rendering

Instead of shipping the entire JS to the client-side and doing all the
rendering there, you can generate the page dynamically on the server and
then send it to the client’s device. This would increase the time it
takes to generate the page, but it will decrease the time it takes to
make a page active in the browser.

However, maintaining both client-side and server-side frameworks for the
same page can be time-consuming.


=== Using pre-rendering

Pre-rendering is a different technique where a headless browser mimics a
regular user’s request and gets the server to render the page. This
rendered page is stored during the build cycle once, and then every
subsequent request uses that pre-rendered page without any computation
on the server, resulting in a fast load time.

This improves the TTFB compared to server-side rendering because the
page is prepared beforehand. But the time to interactive might still
take a hit as it has to wait for the JS to download for the page to
become interactive. Also, since this technique requires pre-rendering of
pages, it may not be scalable if you have a large number of pages.

== Conclusion

Core Web Vitals, which include LCP, have become a significant search
ranking factor and strongly correlate with the user experience.
Therefore, if you run an online business, you should optimize these
vitals to ensure the success of the same.

The above techniques have a significant impact on optimizing LCP. Using
ImageKit as your image CDN will give you a quick headstart.

https://imagekit.io/registration/?utm_source=css-tricks&utm_medium=sponsored_content&utm_campaign=csstricks_LCP[Sign-up for a forever free account],
upload your images to the ImageKit storage,
or connect your origin, and start delivering optimized images in
minutes.
